

-- List the number of films per category.
select
c.name as category,
count(f.film_id) as number_of_films
from film_category as fc
join film as f on fc.film_id = f.film_id
join category as c on fc.category_id = c.category_id
group by 
c.name
order by
number_of_films desc;

-- Retrieve the store ID, city, and country for each store.
select
s.store_id,
a.city,
co.country
from
store as s 
join
address as a on s.address_id = a.address_id
join
city as ci on a.city_id = ci.city_id
join
country as co on ci.country_id = co.country_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
GROUP BY s.store_id;

-- Determine the average running time of films for each category.
SELECT c.name AS category_name, AVG(f.length) AS average_length
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name;
-- Bonus:

-- Identify the film categories with the longest average running time.
-- Display the top 10 most frequently rented movies in descending order.
-- Determine if "Academy Dinosaur" can be rented from Store 1.
-- Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
